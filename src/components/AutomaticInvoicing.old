import { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "./ui/card";
import { Button } from "./ui/button";
import { Input } from "./ui/input";
import { Label } from "./ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "./ui/select";
import { Badge } from "./ui/badge";
import { Switch } from "./ui/switch";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from "./ui/dialog";
import { Textarea } from "./ui/textarea";
import { Calendar, CalendarDays, Clock, Plus, Play, Pause, Settings, FileText, AlertCircle, CheckCircle, DollarSign } from "lucide-react";
import { toast } from "sonner@2.0.3";
import { Client } from "../types/client";

interface AutoInvoiceRule {
  id: string;
  name: string;
  clientId: string;
  clientName: string;
  frequency: 'monthly' | 'quarterly' | 'yearly' | 'weekly';
  amount: number;
  description: string;
  nextInvoiceDate: string;
  isActive: boolean;
  invoiceTemplate?: string;
  lastInvoiced?: string;
  vatRate: number;
  paymentTerms: number; // days
  created: string;
}

interface AutomaticInvoicingProps {
  clients: Client[];
}

export function AutomaticInvoicing({ clients }: AutomaticInvoicingProps) {
  // Filter clients that have automatic invoicing enabled
  const clientsWithAutoInvoicing = clients.filter(client => client.autoInvoicing?.enabled);
  const [selectedClient, setSelectedClient] = useState<Client | null>(null);
  const [isEditing, setIsEditing] = useState(false);

  const getNextInvoiceDate = (client: Client) => {
    if (!client.autoInvoicing?.nextInvoiceDate) {
      return 'Nie ustawiono';
    }
    return new Date(client.autoInvoicing.nextInvoiceDate).toLocaleDateString('pl-PL');
  };

  const getFrequencyLabel = (frequency: string) => {
    const labels = {
      'weekly': 'Co tydzień',
      'monthly': 'Co miesiąc', 
      'quarterly': 'Co kwartał',
      'yearly': 'Co rok'
    };
    return labels[frequency as keyof typeof labels] || frequency;
  };

  const getClientDisplayName = (client: Client) => {
    return client.companyName || client.company || `${client.firstName} ${client.lastName}`;
  };

  const handleToggleActive = (client: Client) => {
    // In a real app, this would update the client's autoInvoicing settings
    toast.success(`Automatyczne fakturowanie ${client.autoInvoicing?.enabled ? 'wyłączone' : 'włączone'} dla ${getClientDisplayName(client)}`);
  };

  const handleEditSettings = (client: Client) => {
    setSelectedClient(client);
    setIsEditing(true);
  };

  const handleGenerateInvoice = (client: Client) => {
    if (!client.autoInvoicing) return;
    
    toast.success(`Generowanie faktury dla ${getClientDisplayName(client)}...`);
    // In a real app, this would trigger invoice generation
  };
        paymentTerms: 30,
        created: new Date(2024, 8, 15).toISOString()
      }
    ];
    setRules(mockRules);
  }, [clients]);

  const frequencies = [
    { value: 'weekly', label: 'Tygodniowo' },
    { value: 'monthly', label: 'Miesięcznie' },
    { value: 'quarterly', label: 'Kwartalnie' },
    { value: 'yearly', label: 'Rocznie' }
  ];

  const getNextInvoiceDate = (frequency: string, lastDate?: string) => {
    const base = lastDate ? new Date(lastDate) : new Date();
    const next = new Date(base);
    
    switch (frequency) {
      case 'weekly':
        next.setDate(next.getDate() + 7);
        break;
      case 'monthly':
        next.setMonth(next.getMonth() + 1);
        break;
      case 'quarterly':
        next.setMonth(next.getMonth() + 3);
        break;
      case 'yearly':
        next.setFullYear(next.getFullYear() + 1);
        break;
    }
    
    return next.toISOString();
  };

  const handleCreateRule = () => {
    if (!newRule.name || !newRule.clientId || !newRule.amount) {
      toast.error("Wypełnij wszystkie wymagane pola");
      return;
    }

    const client = clients.find(c => c.id === newRule.clientId);
    const rule: AutoInvoiceRule = {
      id: Date.now().toString(),
      name: newRule.name,
      clientId: newRule.clientId,
      clientName: client?.company || `${client?.firstName} ${client?.lastName}` || 'Nieznany klient',
      frequency: newRule.frequency,
      amount: newRule.amount,
      description: newRule.description,
      nextInvoiceDate: getNextInvoiceDate(newRule.frequency),
      isActive: newRule.isActive,
      vatRate: newRule.vatRate,
      paymentTerms: newRule.paymentTerms,
      created: new Date().toISOString()
    };

    setRules(prev => [...prev, rule]);
    setIsCreating(false);
    setNewRule({
      name: '',
      clientId: '',
      frequency: 'monthly',
      amount: 0,
      description: '',
      vatRate: 23,
      paymentTerms: 14,
      isActive: true
    });
    toast.success("Reguła automatycznego fakturowania została utworzona");
  };

  const toggleRule = (ruleId: string) => {
    setRules(prev => prev.map(rule => 
      rule.id === ruleId 
        ? { ...rule, isActive: !rule.isActive }
        : rule
    ));
    toast.success("Status reguły został zmieniony");
  };

  const generateInvoiceNow = (ruleId: string) => {
    const rule = rules.find(r => r.id === ruleId);
    if (!rule) return;

    setRules(prev => prev.map(r => 
      r.id === ruleId 
        ? { 
            ...r, 
            lastInvoiced: new Date().toISOString(),
            nextInvoiceDate: getNextInvoiceDate(r.frequency, new Date().toISOString())
          }
        : r
    ));
    
    toast.success(`Faktura została wygenerowana dla ${rule.clientName}`);
  };

  const isOverdue = (date: string) => {
    return new Date(date) < new Date();
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('pl-PL');
  };

  const formatFrequency = (frequency: string) => {
    return frequencies.find(f => f.value === frequency)?.label || frequency;
  };

  const getDaysUntilNext = (date: string) => {
    const nextDate = new Date(date);
    const today = new Date();
    const diffTime = nextDate.getTime() - today.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    return diffDays;
  };

  const getStatusBadge = (rule: AutoInvoiceRule) => {
    if (!rule.isActive) {
      return <Badge variant="secondary">Nieaktywna</Badge>;
    }
    
    const daysUntil = getDaysUntilNext(rule.nextInvoiceDate);
    
    if (daysUntil < 0) {
      return <Badge variant="destructive">Zaległość</Badge>;
    } else if (daysUntil <= 7) {
      return <Badge variant="default">Wkrótce</Badge>;
    } else {
      return <Badge variant="outline">Aktywna</Badge>;
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1>Automatyczne Fakturowanie</h1>
          <p className="text-muted-foreground">
            Przegląd i zarządzanie automatycznym fakturowaniem klientów
          </p>
        </div>
        <div className="flex gap-2">
          <Button variant="outline" size="sm">
            <Settings className="mr-2 h-4 w-4" />
            Ustawienia globalne
          </Button>
        </div>
      </div>

      {/* Statistics Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Aktywne reguły</CardTitle>
            <CheckCircle className="h-4 w-4 text-green-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{clientsWithAutoInvoicing.length}</div>
            <p className="text-xs text-muted-foreground">
              z {clients.length} klientów
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Następne faktury</CardTitle>
            <Calendar className="h-4 w-4 text-blue-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {clientsWithAutoInvoicing.filter(c => {
                const nextDate = c.autoInvoicing?.nextInvoiceDate;
                if (!nextDate) return false;
                const daysDiff = Math.ceil((new Date(nextDate).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24));
                return daysDiff <= 7;
              }).length}
            </div>
            <p className="text-xs text-muted-foreground">
              w tym tygodniu
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Miesięczny przychód</CardTitle>
            <DollarSign className="h-4 w-4 text-green-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {clientsWithAutoInvoicing
                .filter(c => c.autoInvoicing?.frequency === 'monthly')
                .reduce((sum, c) => sum + (c.autoInvoicing?.amount || 0), 0)
                .toLocaleString('pl-PL', { minimumFractionDigits: 2 })} zł
            </div>
            <p className="text-xs text-muted-foreground">
              faktury miesięczne
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Przekroczenia limitów</CardTitle>
            <AlertCircle className="h-4 w-4 text-red-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">0</div>
            <p className="text-xs text-muted-foreground">
              aktualnie
            </p>
          </CardContent>
        </Card>
      </div>

      {/* Active Auto-Invoicing Rules */}
      {clientsWithAutoInvoicing.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle>Aktywne automatyczne fakturowanie</CardTitle>
            <CardDescription>
              Klienci z włączonym automatycznym fakturowaniem
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {clientsWithAutoInvoicing.map((client) => (
                <div key={client.id} className="flex items-center justify-between p-4 border rounded-lg">
                  <div className="flex-1">
                    <div className="flex items-center gap-2">
                      <h3 className="font-semibold">{getClientDisplayName(client)}</h3>
                      <Badge variant="outline" className="text-green-700 border-green-200">
                        {getFrequencyLabel(client.autoInvoicing?.frequency || 'monthly')}
                      </Badge>
                      {client.autoInvoicing?.documentsLimitWarning && (
                        <Badge variant="secondary" className="text-xs">
                          Limit: {client.autoInvoicing.documentsLimit} dok.
                        </Badge>
                      )}
                    </div>
                    <p className="text-sm text-muted-foreground mt-1">
                      {client.autoInvoicing?.description}
                    </p>
                    <div className="flex items-center gap-4 mt-2 text-sm">
                      <span className="text-muted-foreground">
                        <strong>Kwota:</strong> {client.autoInvoicing?.amount?.toFixed(2)} zł netto
                      </span>
                      <span className="text-muted-foreground">
                        <strong>Następna:</strong> {getNextInvoiceDate(client)}
                      </span>
                      <span className="text-muted-foreground">
                        <strong>Płatność:</strong> {client.autoInvoicing?.paymentTerms} dni
                      </span>
                    </div>
                  </div>
                  
                  <div className="flex items-center gap-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => handleGenerateInvoice(client)}
                    >
                      <FileText className="mr-2 h-4 w-4" />
                      Generuj teraz
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => handleEditSettings(client)}
                    >
                      <Settings className="mr-2 h-4 w-4" />
                      Edytuj
                    </Button>
                    <Switch
                      checked={client.autoInvoicing?.enabled || false}
                      onCheckedChange={() => handleToggleActive(client)}
                    />
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Clients Without Auto-Invoicing */}
      <Card>
        <CardHeader>
          <CardTitle>Klienci bez automatycznego fakturowania</CardTitle>
          <CardDescription>
            Klienci, dla których można skonfigurować automatyczne fakturowanie
          </CardDescription>
        </CardHeader>
        <CardContent>
          {clients.filter(client => !client.autoInvoicing?.enabled).length === 0 ? (
            <p className="text-muted-foreground text-center py-8">
              Wszyscy klienci mają skonfigurowane automatyczne fakturowanie
            </p>
          ) : (
            <div className="space-y-3">
              {clients
                .filter(client => !client.autoInvoicing?.enabled)
                .slice(0, 5) // Show only first 5
                .map((client) => (
                  <div key={client.id} className="flex items-center justify-between p-3 border rounded-lg bg-gray-50">
                    <div>
                      <h4 className="font-medium">{getClientDisplayName(client)}</h4>
                      <p className="text-sm text-muted-foreground">
                        Status: {client.status} • Dodano: {new Date(client.dateAdded).toLocaleDateString('pl-PL')}
                      </p>
                    </div>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => handleEditSettings(client)}
                    >
                      <Plus className="mr-2 h-4 w-4" />
                      Skonfiguruj
                    </Button>
                  </div>
                ))}
              {clients.filter(client => !client.autoInvoicing?.enabled).length > 5 && (
                <p className="text-sm text-muted-foreground text-center pt-2">
                  i {clients.filter(client => !client.autoInvoicing?.enabled).length - 5} więcej...
                </p>
              )}
            </div>
          )}
        </CardContent>
      </Card>

      {/* Upcoming Invoices Calendar */}
      {clientsWithAutoInvoicing.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <CalendarDays className="h-5 w-5" />
              Nadchodzące faktury
            </CardTitle>
            <CardDescription>
              Harmonogram automatycznego generowania faktur w najbliższych 30 dniach
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              {clientsWithAutoInvoicing
                .filter(client => {
                  const nextDate = client.autoInvoicing?.nextInvoiceDate;
                  if (!nextDate) return false;
                  const daysDiff = Math.ceil((new Date(nextDate).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24));
                  return daysDiff <= 30 && daysDiff >= 0;
                })
                .sort((a, b) => {
                  const dateA = new Date(a.autoInvoicing?.nextInvoiceDate || '').getTime();
                  const dateB = new Date(b.autoInvoicing?.nextInvoiceDate || '').getTime();
                  return dateA - dateB;
                })
                .map((client) => (
                  <div key={client.id} className="flex items-center gap-3 p-2 hover:bg-gray-50 rounded">
                    <div className="flex-shrink-0 w-12 text-center">
                      <div className="text-lg font-bold">
                        {new Date(client.autoInvoicing?.nextInvoiceDate || '').getDate()}
                      </div>
                      <div className="text-xs text-muted-foreground">
                        {new Date(client.autoInvoicing?.nextInvoiceDate || '').toLocaleDateString('pl-PL', { month: 'short' })}
                      </div>
                    </div>
                    <div className="flex-1">
                      <div className="font-medium">{getClientDisplayName(client)}</div>
                      <div className="text-sm text-muted-foreground">
                        {client.autoInvoicing?.amount?.toFixed(2)} zł • {client.autoInvoicing?.description}
                      </div>
                    </div>
                    <Badge variant="outline">
                      {getFrequencyLabel(client.autoInvoicing?.frequency || 'monthly')}
                    </Badge>
                  </div>
                ))}
              {clientsWithAutoInvoicing.filter(client => {
                const nextDate = client.autoInvoicing?.nextInvoiceDate;
                if (!nextDate) return false;
                const daysDiff = Math.ceil((new Date(nextDate).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24));
                return daysDiff <= 30 && daysDiff >= 0;
              }).length === 0 && (
                <p className="text-muted-foreground text-center py-4">
                  Brak zaplanowanych faktur w najbliższych 30 dniach
                </p>
              )}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Edit Client Auto-Invoicing Dialog */}
      <Dialog open={isEditing} onOpenChange={setIsEditing}>
        <DialogContent className="max-w-3xl">
          <DialogHeader>
            <DialogTitle>
              Ustawienia automatycznego fakturowania - {selectedClient && getClientDisplayName(selectedClient)}
            </DialogTitle>
            <DialogDescription>
              Skonfiguruj automatyczne generowanie faktur dla tego klienta.
              Te ustawienia można również edytować w profilu klienta.
            </DialogDescription>
          </DialogHeader>
          
          <div className="text-center py-8">
            <p className="text-muted-foreground">
              Przekierowanie do formularza edycji klienta...
            </p>
            <p className="text-sm text-muted-foreground mt-2">
              W pełnej implementacji tutaj byłby formularz edycji ustawień automatycznego fakturowania
            </p>
          </div>
          
          <div className="flex justify-end gap-2">
            <Button variant="outline" onClick={() => setIsEditing(false)}>
              Anuluj
            </Button>
            <Button onClick={() => {
              toast.success('Ustawienia zostały zapisane');
              setIsEditing(false);
            }}>
              Zapisz zmiany
            </Button>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
                  <Select
                    value={newRule.clientId}
                    onValueChange={(value) => setNewRule(prev => ({ ...prev, clientId: value }))}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Wybierz klienta" />
                    </SelectTrigger>
                    <SelectContent>
                      {clients.map(client => (
                        <SelectItem key={client.id} value={client.id}>
                          {client.company || `${client.firstName} ${client.lastName}`}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                
                <div className="space-y-2">
                  <Label>Częstotliwość *</Label>
                  <Select
                    value={newRule.frequency}
                    onValueChange={(value: any) => setNewRule(prev => ({ ...prev, frequency: value }))}
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      {frequencies.map(freq => (
                        <SelectItem key={freq.value} value={freq.value}>
                          {freq.label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="grid grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label>Kwota netto (PLN) *</Label>
                  <Input
                    type="number"
                    value={newRule.amount}
                    onChange={(e) => setNewRule(prev => ({ ...prev, amount: parseFloat(e.target.value) }))}
                    placeholder="0.00"
                  />
                </div>
                
                <div className="space-y-2">
                  <Label>Stawka VAT (%)</Label>
                  <Input
                    type="number"
                    value={newRule.vatRate}
                    onChange={(e) => setNewRule(prev => ({ ...prev, vatRate: parseInt(e.target.value) }))}
                  />
                </div>
                
                <div className="space-y-2">
                  <Label>Termin płatności (dni)</Label>
                  <Input
                    type="number"
                    value={newRule.paymentTerms}
                    onChange={(e) => setNewRule(prev => ({ ...prev, paymentTerms: parseInt(e.target.value) }))}
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label>Opis usługi</Label>
                <Textarea
                  value={newRule.description}
                  onChange={(e) => setNewRule(prev => ({ ...prev, description: e.target.value }))}
                  placeholder="Opis świadczonej usługi..."
                  rows={3}
                />
              </div>

              <div className="flex items-center space-x-2">
                <Switch
                  checked={newRule.isActive}
                  onCheckedChange={(checked) => setNewRule(prev => ({ ...prev, isActive: checked }))}
                />
                <Label>Reguła aktywna od razu</Label>
              </div>

              <div className="flex justify-end space-x-2">
                <Button variant="outline" onClick={() => setIsCreating(false)}>
                  Anuluj
                </Button>
                <Button onClick={handleCreateRule}>
                  Utwórz regułę
                </Button>
              </div>
            </div>
          </DialogContent>
        </Dialog>
      </div>

      {/* Statistics */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center gap-2">
              <CheckCircle className="h-4 w-4 text-green-600" />
              <div>
                <p className="text-sm text-muted-foreground">Aktywne reguły</p>
                <p className="text-xl font-bold">{rules.filter(r => r.isActive).length}</p>
              </div>
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center gap-2">
              <AlertCircle className="h-4 w-4 text-red-600" />
              <div>
                <p className="text-sm text-muted-foreground">Zaległości</p>
                <p className="text-xl font-bold">
                  {rules.filter(r => r.isActive && isOverdue(r.nextInvoiceDate)).length}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center gap-2">
              <Clock className="h-4 w-4 text-blue-600" />
              <div>
                <p className="text-sm text-muted-foreground">W tym tygodniu</p>
                <p className="text-xl font-bold">
                  {rules.filter(r => r.isActive && getDaysUntilNext(r.nextInvoiceDate) <= 7 && getDaysUntilNext(r.nextInvoiceDate) >= 0).length}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center gap-2">
              <DollarSign className="h-4 w-4 text-green-600" />
              <div>
                <p className="text-sm text-muted-foreground">Miesięczny przychód</p>
                <p className="text-xl font-bold">
                  {rules
                    .filter(r => r.isActive && r.frequency === 'monthly')
                    .reduce((sum, r) => sum + r.amount, 0)
                    .toLocaleString('pl-PL')} PLN
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Rules List */}
      <div className="space-y-4">
        {rules.map((rule) => (
          <Card key={rule.id}>
            <CardHeader>
              <div className="flex items-center justify-between">
                <div className="space-y-2">
                  <div className="flex items-center gap-2">
                    <h3 className="font-medium">{rule.name}</h3>
                    {getStatusBadge(rule)}
                  </div>
                  <p className="text-sm text-muted-foreground">
                    {rule.clientName} • {formatFrequency(rule.frequency)} • {rule.amount.toLocaleString('pl-PL')} PLN netto
                  </p>
                </div>
                <div className="flex items-center gap-2">
                  <Switch
                    checked={rule.isActive}
                    onCheckedChange={() => toggleRule(rule.id)}
                  />
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => generateInvoiceNow(rule.id)}
                    disabled={!rule.isActive}
                  >
                    <FileText className="mr-2 h-4 w-4" />
                    Generuj teraz
                  </Button>
                </div>
              </div>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                <div>
                  <p className="text-muted-foreground">Następna faktura</p>
                  <p className={`font-medium ${isOverdue(rule.nextInvoiceDate) ? 'text-red-600' : ''}`}>
                    {formatDate(rule.nextInvoiceDate)}
                    {isOverdue(rule.nextInvoiceDate) && " (zaległość)"}
                  </p>
                </div>
                <div>
                  <p className="text-muted-foreground">Ostatnia faktura</p>
                  <p className="font-medium">
                    {rule.lastInvoiced ? formatDate(rule.lastInvoiced) : 'Nigdy'}
                  </p>
                </div>
                <div>
                  <p className="text-muted-foreground">VAT</p>
                  <p className="font-medium">{rule.vatRate}%</p>
                </div>
                <div>
                  <p className="text-muted-foreground">Termin płatności</p>
                  <p className="font-medium">{rule.paymentTerms} dni</p>
                </div>
              </div>
              {rule.description && (
                <div className="mt-4 pt-4 border-t">
                  <p className="text-sm text-muted-foreground">{rule.description}</p>
                </div>
              )}
            </CardContent>
          </Card>
        ))}
      </div>

      {rules.length === 0 && (
        <Card>
          <CardContent className="text-center py-12">
            <CalendarDays className="mx-auto h-12 w-12 text-muted-foreground mb-4" />
            <h3 className="text-lg font-medium mb-2">Brak reguł automatycznego fakturowania</h3>
            <p className="text-muted-foreground mb-4">
              Utwórz pierwszą regułę, aby zautomatyzować proces generowania faktur
            </p>
            <Button onClick={() => setIsCreating(true)}>
              <Plus className="mr-2 h-4 w-4" />
              Utwórz pierwszą regułę
            </Button>
          </CardContent>
        </Card>
      )}
    </div>
  );
}