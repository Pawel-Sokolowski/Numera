version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: office-management-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-office_management}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/database:/docker-entrypoint-initdb.d:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - office-network

  # Application Server
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: office-management-app
    restart: unless-stopped
    ports:
      - "${PORT:-3000}:3000"
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-office_management}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-changeme}
      JWT_SECRET: ${JWT_SECRET:-please-change-this-secret-in-production}
      PORT: 3000
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      # Mount .env file if it exists
      - ./.env:/app/.env:ro
      # Mount logs directory for persistence
      - ./logs:/app/logs
    networks:
      - office-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy (Optional - for production with SSL)
  nginx:
    image: nginx:alpine
    container_name: office-management-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - office-network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local

networks:
  office-network:
    driver: bridge
